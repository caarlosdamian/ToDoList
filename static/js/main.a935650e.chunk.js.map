{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","todoList","settodoList","currentTask","setcurrentTask","hide_table","setHideTable","inputTask","useRef","addTask","task","completed","current","value","className","Container","Form","Row","Col","xs","Control","ref","type","placeholder","onKeyDown","event","keyCode","preventDefault","onChange","target","Button","variant","onClick","Table","responsive","bordered","hover","map","val","key","taskToComplete","taskToDelete","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PA2GeA,MAjGf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,mBAAS,IAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAmCJ,oBAAS,GAA5C,mBAAOK,EAAP,KAAmBC,EAAnB,KACMC,EAAYC,iBAAO,MAEnBC,EAAU,WACdH,GAAa,GACbJ,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAAES,KAAMP,EAAaQ,WAAW,MAC1DJ,EAAUK,QAAQC,MAAQ,GAC1BT,EAAe,KAqBjB,OACE,sBAAKU,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,2BACA,8BACE,cAACC,EAAA,EAAD,CAAWD,UAAU,qBAArB,SACE,cAACE,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKH,UAAU,4BAAf,UACE,cAACI,EAAA,EAAD,CAAKC,GAAG,OAAOL,UAAU,OAAzB,SACE,cAACE,EAAA,EAAKI,QAAN,CACEC,IAAKd,EACLe,KAAK,OACLC,YAAY,UACZC,UAAW,SAACC,GACY,KAAlBA,EAAMC,UACRD,EAAME,iBACNlB,MAEJmB,SAAU,SAACH,GACTrB,EAAeqB,EAAMI,OAAOhB,YAIlC,cAACK,EAAA,EAAD,CAAKC,GAAG,OAAOL,UAAU,OAAzB,SACE,cAACgB,EAAA,EAAD,CACEhB,UAAU,OACViB,QAAQ,eACRC,QAASvB,EAHX,iCAYV,uBACA,cAACQ,EAAA,EAAD,CAAKH,UAAU,4BAAf,SACE,cAACmB,EAAA,EAAD,CAAOC,WAAW,KAAMC,UAAQ,EAACC,OAAK,EAAEtB,UAAWT,EAAa,GAAK,OAArE,SACE,kCACE,+BACE,uCACA,yCACA,2CAEDJ,EAASoC,KAAI,SAACC,EAAKC,GAClB,OACE,+BACE,6BAAKD,EAAI5B,OACT,6BACE,sBAAKI,UAAU,QAAf,UACE,cAAC,IAAD,CAAakB,QAAS,kBA5DpBQ,EA4DuCF,EAAI5B,UA3D/DR,EACED,EAASoC,KAAI,SAACC,GACZ,OAAOA,EAAI5B,OAAS8B,EAChB,CAAE9B,KAAM8B,EAAgB7B,WAAW,GACnC,CAAED,KAAM4B,EAAI5B,KAAMC,YAAW2B,EAAI3B,eALtB,IAAC6B,KA8DF,cAAC,IAAD,CAAUR,QAAS,kBAtEnBS,EAsEoCH,EAAI5B,UArE1DR,EACED,EAASyC,QAAO,SAACJ,GACf,OAAOA,EAAI5B,OAAS+B,MAHP,IAACA,UAyEJ,6BAAKH,EAAI3B,UAAY,0CAAmB,4CATjC4B,iBC3EVI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a935650e.chunk.js","sourcesContent":["import \"./App.css\";\r\nimport { useState, useRef } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Table from \"react-bootstrap/Table\";\r\nimport { FcCheckmark, FcCancel } from \"react-icons/fc\";\r\n\r\nfunction App() {\r\n  const [todoList, settodoList] = useState([]);\r\n  const [currentTask, setcurrentTask] = useState(\"\");\r\n  const [hide_table, setHideTable] = useState(false);\r\n  const inputTask = useRef(null);\r\n\r\n  const addTask = () => {\r\n    setHideTable(true)\r\n    settodoList([...todoList, { task: currentTask, completed: false }]);\r\n    inputTask.current.value = \"\";\r\n    setcurrentTask(\"\");\r\n  };\r\n\r\n  const deleteTask = (taskToDelete) => {\r\n    settodoList(\r\n      todoList.filter((val) => {\r\n        return val.task !== taskToDelete;\r\n      })\r\n    );\r\n  };\r\n\r\n  const completeTask = (taskToComplete) => {\r\n    settodoList(\r\n      todoList.map((val) => {\r\n        return val.task === taskToComplete\r\n          ? { task: taskToComplete, completed: true }\r\n          : { task: val.task, completed: val.completed ? true : false };\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"title is-1\">Shopping List</h1>\r\n      <div>\r\n        <Container className=\"align-items-center\">\r\n          <Form >\r\n            <Row className=\"justify-content-md-center\">\r\n              <Col xs=\"auto\" className=\"my-1\">\r\n                <Form.Control\r\n                  ref={inputTask}\r\n                  type=\"text\"\r\n                  placeholder=\"Item...\"\r\n                  onKeyDown={(event) => {\r\n                    if (event.keyCode === 13){ \r\n                      event.preventDefault();\r\n                      addTask()};\r\n                  }}\r\n                  onChange={(event) => {\r\n                    setcurrentTask(event.target.value);\r\n                  }}\r\n                ></Form.Control>\r\n              </Col>\r\n              <Col xs=\"auto\" className=\"my-1\">\r\n                <Button\r\n                  className=\"my-1\"\r\n                  variant=\"outline-info\"\r\n                  onClick={addTask}\r\n                >\r\n                  Add Item\r\n                </Button>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Container>\r\n      </div>\r\n      <hr></hr>\r\n      <Row className=\"justify-content-md-center\">\r\n        <Table responsive=\"sm\"  bordered hover  className={hide_table ? \"\" : \"hide\"}>\r\n          <tbody>\r\n            <tr>\r\n              <th>Item </th>\r\n              <th>Actions</th>\r\n              <th>Status</th>\r\n            </tr>\r\n            {todoList.map((val, key) => {\r\n              return (\r\n                <tr key={key}>\r\n                  <td>{val.task}</td>\r\n                  <td>\r\n                    <div className=\"icons\">\r\n                      <FcCheckmark onClick={() => completeTask(val.task)} />\r\n                   \r\n                      <FcCancel onClick={() => deleteTask(val.task)} />\r\n                      </div>\r\n                  </td>\r\n                  <td>{val.completed ? <p>Completed</p> : <p>Pending</p>}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </Table>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}